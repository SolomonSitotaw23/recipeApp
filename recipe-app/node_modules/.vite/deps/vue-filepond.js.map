{
  "version": 3,
  "sources": ["../../vue-filepond/dist/vue-filepond.esm.js", "dep:vue-filepond"],
  "sourcesContent": ["/*!\n * vue-filepond v7.0.3\n * A handy FilePond adapter component for Vue\n * \n * Copyright (c) 2022 PQINA\n * https://pqina.nl/filepond\n * \n * Licensed under the MIT license.\n */\n\nimport { h } from \"vue\";\n\nimport { OptionTypes, create, supported, registerPlugin } from \"filepond\";\n\n// Methods not made available to the component\nconst filteredComponentMethods = [\n  \"setOptions\",\n  \"on\",\n  \"off\",\n  \"onOnce\",\n  \"appendTo\",\n  \"insertAfter\",\n  \"insertBefore\",\n  \"isAttachedTo\",\n  \"replaceElement\",\n  \"restoreElement\",\n  \"destroy\",\n];\n\n// Test if is supported on this client\nconst isSupported = supported();\n\n// Setup initial prop types and update when plugins are added\nconst getNativeConstructorFromType = (type) =>\n  ({\n    string: String,\n    boolean: Boolean,\n    array: Array,\n    function: Function,\n    int: Number,\n    serverapi: Object,\n    object: Object,\n  }[type]);\n\n// Activated props\nconst props = {};\n\n// Events that need to be mapped to emitters\nconst events = [];\n\n// all active instances\nconst instances = [];\n\n// global options\nlet globalOptions = {};\nexport const setOptions = (options) => {\n  globalOptions = Object.assign(globalOptions, options);\n  instances.forEach((instance) => {\n    instance.setOptions(globalOptions);\n  });\n};\n\nexport default (...plugins) => {\n  // register plugins in FilePond\n  registerPlugin(...plugins);\n\n  // build events and props array\n  events.length = 0;\n  for (const prop in OptionTypes) {\n    // don't add events to the props array\n    if (/^on/.test(prop)) {\n      events.push(prop);\n      continue;\n    }\n\n    // get property type ( can be either a String or the type defined within FilePond )\n    let valid_types = [String, getNativeConstructorFromType(OptionTypes[prop])];\n\n    // labelFileProcessingError can also be Function\n    if (prop == \"labelFileProcessingError\") {\n      valid_types.push(Function);\n    }\n\n    props[prop] = {\n      type: valid_types,\n\n      // set this default value so we know which props have been explicitely set by user on component\n      default: undefined,\n    };\n  }\n\n  // create\n  return {\n    name: \"FilePond\",\n    props,\n\n    render() {\n      // clean up undefined attributes\n      const attributes = Object.entries({\n        id: this.id,\n        name: this.name,\n        type: \"file\",\n        class: this.className,\n        required: this.required,\n        multiple: this.allowMultiple,\n        accept: this.acceptedFileTypes,\n        capture: this.captureMethod,\n      }).reduce((attributes, [key, value]) => {\n        if (value !== undefined) attributes[key] = value;\n        return attributes;\n      }, {});\n\n      // create base element\n      return h(\n        \"div\",\n        {\n          class: {\n            \"filepond--wrapper\": true,\n          },\n        },\n        [h(\"input\", attributes)]\n      );\n    },\n\n    created() {\n      this.watchers = Object.keys(props).map((key) => {\n        return this.$watch(key, (next) => {\n          this._pond[key] = next;\n        });\n      });\n    },\n\n    // Will setup FilePond instance when mounted\n    mounted() {\n      // exit here if not supported\n      if (!isSupported) return;\n\n      // get pond element\n      this._element = this.$el.querySelector(\"input\");\n\n      // Map FilePond callback methods to Vue $emitters\n      const options = events.reduce((obj, value) => {\n        obj[value] = (...args) => {\n          this.$emit(\"input\", this._pond ? this._pond.getFiles() : []);\n          this.$emit(value.substr(2), ...args);\n        };\n        return obj;\n      }, {});\n\n      const passedProps = {};\n      Object.keys(props).forEach((key) => {\n        if (this[key] === undefined) return;\n        passedProps[key] = this[key];\n      });\n\n      // Create our pond\n      this._pond = create(\n        this._element,\n        Object.assign({}, globalOptions, options, passedProps)\n      );\n\n      // Copy instance method references to component instance\n      Object.keys(this._pond)\n        .filter((key) => !filteredComponentMethods.includes(key))\n        .forEach((key) => {\n          this[key] = this._pond[key];\n        });\n\n      // Add to instances so we can apply global options when used\n      instances.push(this._pond);\n    },\n\n    // Will clean up FilePond instance when unmounted\n    beforeUnmount() {\n      // reference to detached method\n      const { detached } = this.$options;\n\n      // no longer attached, clean up\n      if (!this.$el.offsetParent) {\n        detached.call(this);\n        return;\n      }\n\n      // if we're still attached it's likely a transition is running, we need to\n      // determine the moment when we're no longer attached to the DOM so we can\n      // clean up properly\n      const mutationHandler = (mutations, observer) => {\n        const removedNodes = (mutations[0] || {}).removedNodes || [];\n        const removedNode = removedNodes[0];\n        if (!removedNode || !removedNode.contains(this.$el)) return;\n        observer.disconnect();\n        detached.call(this);\n      };\n\n      // start observing parent element for changes to the DOM\n      const observer = new MutationObserver(mutationHandler);\n      observer.observe(document.documentElement, {\n        childList: true,\n        subtree: true,\n      });\n    },\n\n    // called when the component root node has been detached\n    detached() {\n      this.watchers.forEach((unwatch) => unwatch());\n\n      // exit when no pond defined\n      if (!this._pond) return;\n\n      // bye bye pond\n      this._pond.destroy();\n\n      // remove from instances\n      const index = instances.indexOf(this._pond);\n      if (index >= 0) {\n        instances.splice(index, 1);\n      }\n\n      // clear reference\n      this._pond = null;\n    },\n  };\n};\n\n", "import d from \"./node_modules/vue-filepond/dist/vue-filepond.esm.js\";export default d;\nexport * from \"./node_modules/vue-filepond/dist/vue-filepond.esm.js\""],
  "mappings": "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",
  "names": ["attributes", "observer"]
}
